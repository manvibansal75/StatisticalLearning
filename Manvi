# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import pandas as pd 
import numpy as np
import json
from glob import glob
from datetime import datetime
from sklearn.preprocessing import OneHotEncoder 
from sklearn.preprocessing import LabelEncoder 
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
from sklearn.metrics import classification_report, confusion_matrix

all_files = glob("data/*.csv")
dataset = []
for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    dataset.append(df)
df = pd.concat(dataset, axis=0, ignore_index=True)
#len(df.columns.tolist())
#print(df.head(1))


df['master_category'] = [json.loads(c)['slug'].split('/')[0] for c in df['category'].to_list()]
df['category'] = [json.loads(c)['slug'] for c in df['category'].to_list()]
df['created_at'] = [datetime.fromtimestamp(d) for d in df['created_at'].to_list()]
df['deadline'] = [datetime.fromtimestamp(d) for d in df['deadline'].to_list()]
df['launched_at'] = [datetime.fromtimestamp(d) for d in df['launched_at'].to_list()]
df['currency_trailing_code'][df['currency_trailing_code']] = 1
df['spotlight'][df['spotlight']] = 1
df['staff_pick'][df['staff_pick']] = 1
df['successful'] = 0
df['successful'][df['state']=='successful'] = 1
df['blurb_count'] = [len(str(row).split()) for row in df['blurb'].tolist()]
df['blurb_length'] = [len (str(row))for row in df['blurb'].tolist()]
df ['name_length'] = [len (str(row))for row in df['name'].tolist()]
df ['name_word_count'] = [len(str(row).split()) for row in df['name'].tolist()]

df['funding_duration'] = 0
df ['pre_launch_duration'] = 0
#df['funding_duration'] =[int(str(ddl - lt).split()[0]) for ddl in df['deadline'] and lt in df['launched_at']]


for i in range (len (df.index)):
   df ['funding_duration'][i] = (str( df['deadline'][i] - df ['launched_at'][i]).split())[0]
   df ['pre_launch_duration'][i] = (str( df['launched_at'][i] - df ['created_at'][i]).split())[0]


len (df.index)
df['failed'] = 0
df['failed'][df['state']=='failed'] = 1
#print(df['name_length'])

#country to continent
c1=0
c2=0
c3=0
a=[]

for c in df['country_displayable_name'].tolist():
    if c=='the United States' or c=='Canada':
        #df1['continent'] = "USA"
        a.append("USA")
        c1=c1+1
    elif c=='Hong Kong' or c=='Singapore' or c=='Australia':
        #df1['continent'] = "Asia"
        a.append("Asia")
        c2=c2+1
    else: 
        #df1['continent'] = "Europe"
        a.append("Europe")
        c3=c3+1

df['continent'] = a



#dropping useless rows
df['state'].unique()
df = df.set_index("state")
df = df.drop("live", axis=0)
df = df.drop("suspended", axis=0)
df = df.drop("canceled", axis=0)
df= df.reset_index()

df.drop_duplicates()


df.to_pickle('data.pkl')
df = pd.read_pickle('data.pkl')
df2= pd.read_pickle('data.pkl')

df.to_pickle('data_removedRows.pkl')
df= pd.read_pickle('data_removedRows.pkl')
df2= pd.read_pickle('data_removedRows.pkl')

le = LabelEncoder() 
df2['spotlight']= le.fit_transform(df2['spotlight']) #need to one hot 
df2['is_starrable']= le.fit_transform(df2['is_starrable']) #dont one hot 
df2['currency_symbol'] = le.fit_transform(df2['currency_symbol']) #need to one hot 
df2['master_category'] = le.fit_transform(df2['master_category']) 
#df['continent']= le.fit_transform(df['continent']) #dont label


ohe = OneHotEncoder() 
ohe = pd.get_dummies(df2['spotlight'])
ohe.columns = ['spot_1', 'spot_2' ]
df2 = df2.join (ohe)
df2 = df2.drop ('spotlight', axis = 1)

ohe = pd.get_dummies(df2['continent'])
ohe.columns = ['continent_1', 'continent_2', 'continent_3' ]
df2 = df2.join (ohe)
df2 = df2.drop ('continent', axis = 1)

ohe = pd.get_dummies(df2['currency_symbol'])
ohe.columns = ['curr_1', 'curr_2', 'curr_3', 'curr_4','curr_5','curr_6' ]
df2 = df2.join (ohe)
df2 = df2.drop ('currency_symbol', axis = 1)

ohe = pd.get_dummies(df2['master_category'])
ohe.columns = ['mas_1', 'mas_2', 'mas_3', 'mas_4','mas_5','mas_6','mas_7', 'mas_8', 'mas_9', 'mas_10','mas_11','mas_12','mas_13','mas_14','mas_15' ]
df2 = df2.join (ohe)
df2 = df2.drop ('master_category', axis = 1)

#dropping unrequired columns from df2
df2 = df2.drop ('blurb', axis = 1)
df2 = df2.drop ('is_starred', axis = 1)
df2 = df2.drop ('friends', axis = 1)
df2 = df2.drop ('country_displayable_name', axis = 1)
df2 = df2.drop ('country', axis = 1)
df2 = df2.drop ('category', axis = 1)
df2 = df2.drop ('urls', axis = 1)
df2 = df2.drop ('source_url', axis = 1)
df2 = df2.drop ('photo', axis = 1)
df2 = df2.drop ('profile', axis = 1)
df2 = df2.drop ('currency_trailing_code', axis = 1)
df2 = df2.drop ('converted_pledged_amount', axis = 1)
df2 = df2.drop ('static_usd_rate', axis = 1)
df2 = df2.drop ('state_changed_at', axis = 1)
df2 = df2.drop ('fx_rate', axis = 1)
df2 = df2.drop ('id', axis = 1)
df2 = df2.drop ('current_currency', axis = 1)
df2 = df2.drop ('is_backing', axis = 1)
df2 = df2.drop ('state', axis = 1)
df2 = df2.drop ('created_at', axis = 1)
df2 = df2.drop ('creator', axis = 1)
df2 = df2.drop ('currency', axis = 1)
df2 = df2.drop ('deadline', axis = 1)
df2 = df2.drop ('disable_communication', axis = 1) #check later
df2 = df2.drop ('permissions', axis = 1) #check later
df2 = df2.drop ('slug', axis = 1) #check later
df2 = df2.drop ('usd_pledged', axis = 1)
df2 = df2.drop ('usd_type', axis = 1)
df2 = df2.drop ('location', axis = 1)
df2 = df2.drop ('launched_at', axis = 1)
df2 = df2.drop ('name', axis = 1)
df2 = df2.drop ('pledged', axis = 1)
df2 = df2.drop ('failed', axis = 1)
 


df2.to_pickle('data_allDone.pkl')
df2= pd.read_pickle('data_allDone.pkl')

df2.columns.tolist()
df2.head(5)
#no_need = ['backers_count', 'goal','spot_1', 'spot_2', 'is_starrable', 'blurb_count','continent_1', 'continent_2', 'continent_3', 'curr_1', 'curr_2', 'curr_3', 'curr_4','curr_5','curr_6', ]



#Random Forest
X = df2.drop(["successful"], axis=1)
y = df2['successful']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.4)
rfc = RandomForestClassifier(n_estimators=50)
rfc.fit(X_train,y_train)
pred = rfc.predict(X_test)

print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,pred))

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)




#Linear Regression
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state = 0)

y_pred = regressor.predict(X_test)
df44 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df44














#CREATING GRAPHS  

#success by country 
allCountries = df['country_displayable_name'].unique()
allCountriesStr = []
numList = list()
countrySuccess = []
countryFail = []


for country in allCountries:
    x = (np.where(df['country_displayable_name']== country, df['successful'],0).sum())
    y = (np.where(df['country_displayable_name']== country, df['failed'],0).sum())
    countrySuccess.append(x)
    countryFail.append(y)
    allCountriesStr.append(str(country))
    numList.append(tuple([country, x, y]))

indices = np.arange(len(numList))
width = 0.35
plt.bar(indices, countrySuccess, width, color='dodgerblue', label = 'Successful')
plt.bar(indices+width, countryFail, width,  color='r', label = 'Failed')
plt.ylabel('Number of Projects')
plt.title('Successful and Failed Projects by Country')

plt.xticks(indices + width / 2, allCountriesStr, rotation='vertical')
#plt.tight_layout()
plt.legend(loc='best')
plt.show()


#success by continent
allContinents = df['continent'].unique()
allContinentsStr = []
numList = list()
contiSuccess = []
contiFail = []

for conti in allContinents:
    x = (np.where(df['continent']== conti, df['successful'],0).sum())
    y = (np.where(df['continent']== conti, df['failed'],0).sum())
    contiSuccess.append(x)
    contiFail.append(y)
    allContinentsStr.append(str(conti))
    numList.append(tuple([conti, x, y]))

indices = np.arange(len(numList))
width = 0.35
plt.bar(indices, contiSuccess, width, color='dodgerblue', label = 'Successful')
plt.bar(indices+width, contiFail, width,  color='r', label = 'Failed')
plt.ylabel('Number of Projects')
plt.title('Successful and Failed Projects by Continent')

plt.xticks(indices + width / 2, allContinentsStr, rotation='vertical')
#plt.tight_layout()
plt.legend(loc='best')
plt.show()

#number of backers by country 
allCountries = df['country_displayable_name'].unique()
allCountriesStr = []
numList = list()
countryBackers = []


for country in allCountries:
    x = (np.where(df['country_displayable_name']== country, df['backers_count'],0).sum())
    #y = (np.where(df['country_displayable_name']== country, df['successful'],0).sum())
    #z = (np.where(df['country_displayable_name']== country, df['failed'],0).sum())
    countryBackers.append(x)
    #countryFail.append(y)
    allCountriesStr.append(str(country))
    numList.append(tuple([country, x]))
    

indices = np.arange(len(numList))
width = 0.35
plt.bar(indices, countryBackers, width, color='dodgerblue', label = 'Number of Backers')
plt.ylabel('Backers')
plt.title('Net number of Backers by Country')

plt.xticks(indices + width / 2, allCountriesStr, rotation = 'vertical')
plt.legend(loc='best')
plt.show()

#number of success and failure by category
allCategories = df['master_category'].unique()
allCategoriesStr = []
numList = list()
categorySuccess = []
categoryFail = []


for cat in allCategories:
    x = (np.where(df['master_category']== cat, df['successful'],0).sum())
    y = (np.where(df['master_category']== cat, df['failed'],0).sum())
    categorySuccess.append(x)
    categoryFail.append(y)
    allCategoriesStr.append(str(cat))
    numList.append(tuple([cat, x, y]))

indices = np.arange(len(numList))
width = 0.35
plt.bar(indices, categorySuccess, width, color='dodgerblue', label = 'Successful')
plt.bar(indices+width, categoryFail, width,  color='r', label = 'Failed')
plt.ylabel('Number of Projects')
plt.title('Successful and Failed Projects by Category')

plt.xticks(indices + width / 2, allCategoriesStr, rotation='vertical')
#plt.tight_layout()
plt.legend(loc='best')
plt.show()





